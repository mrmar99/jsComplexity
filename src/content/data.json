{
  "en": {
    "array": {
      "array/arrayfrom": {
        "content": "Hi :) It's `Array.from`.",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n * k)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n)",
          "color": "lightgreen"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.from",
        "title": "Array.from()",
        "slug": "array/arrayfrom"
      },
      "array/arrayfromasync": {
        "content": "Hi :) It's `Array.fromAsync`.",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n * k)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n)",
          "color": "lightgreen"
        },
        "esLink": "https://tc39.es/proposal-array-from-async/#sec-array.fromAsync",
        "title": "Array.fromAsync()",
        "slug": "array/arrayfromasync"
      },
      "array/arrayisarray": {
        "content": "Hi :) It's `Array.isArray`.",
        "tc": {
          "best": {
            "title": "O(1)",
            "color": "green"
          },
          "average": {
            "title": "O(1)",
            "color": "green"
          },
          "worst": {
            "title": "O(1)",
            "color": "green"
          }
        },
        "sc": {
          "title": "O(1)",
          "color": "green"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.isarray",
        "title": "Array.isArray()",
        "slug": "array/arrayisarray"
      },
      "array/arrayof": {
        "content": "Hi :) It's `Array.of`.",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n)",
            "color": "lightgreen"
          }
        },
        "sc": {
          "title": "O(n)",
          "color": "lightgreen"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.of",
        "title": "Array.of()",
        "slug": "array/arrayof"
      },
      "array/at": {
        "content": "The **`at()`** method of Array instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.\r\n",
        "tc": {
          "best": {
            "title": "O(1)",
            "color": "green"
          },
          "average": {
            "title": "O(1)",
            "color": "green"
          },
          "worst": {
            "title": "O(1)",
            "color": "green"
          }
        },
        "sc": {
          "title": "O(1)",
          "color": "green"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.at",
        "title": "at()",
        "slug": "array/at"
      },
      "array/concat": {
        "content": "Hi :) It's `at`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n + m * k)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n + m * k)",
          "color": "limegreen"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.concat",
        "title": "concat()",
        "slug": "array/concat"
      },
      "array/copywithin": {
        "content": "en `copyWithin`.",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n)",
            "color": "lightgreen"
          }
        },
        "sc": {
          "title": "O(1)",
          "color": "green"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.copywithin",
        "title": "copyWithin()",
        "slug": "array/copywithin"
      },
      "array/entries": {
        "content": "en `entries`.",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n)",
            "color": "lightgreen"
          }
        },
        "sc": {
          "title": "O(1)",
          "color": "green"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.entries",
        "title": "entries()",
        "slug": "array/entries"
      },
      "array/every": {
        "content": "`every`.",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n * k)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(1)",
          "color": "green"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.every",
        "title": "every()",
        "slug": "array/every"
      },
      "array/fill": {
        "content": "`fill`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "fill()",
        "slug": "array/fill"
      },
      "array/filter": {
        "content": "`filter`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "filter()",
        "slug": "array/filter"
      },
      "array/find": {
        "content": "`find`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "find()",
        "slug": "array/find"
      },
      "array/findindex": {
        "content": "`findIndex`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "findIndex()",
        "slug": "array/findindex"
      },
      "array/findlast": {
        "content": "`findLast`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "findLast()",
        "slug": "array/findlast"
      },
      "array/findlastindex": {
        "content": "Hi :) It's `findLastIndex`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "findLastIndex()",
        "slug": "array/findlastindex"
      },
      "array/flat": {
        "content": "`flat`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "flat()",
        "slug": "array/flat"
      },
      "array/flatmap": {
        "content": "`flatMap`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "flatMap()",
        "slug": "array/flatmap"
      },
      "array/foreach": {
        "content": "`forEach`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "forEach()",
        "slug": "array/foreach"
      },
      "array/includes": {
        "content": "`includes`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "includes()",
        "slug": "array/includes"
      },
      "array/indexof": {
        "content": "`indexOf`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "indexOf()",
        "slug": "array/indexof"
      },
      "array/join": {
        "content": "Hi :) It's  `join`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "join()",
        "slug": "array/join"
      },
      "array/keys": {
        "content": "`keys`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "keys()",
        "slug": "array/keys"
      },
      "array/lastindexof": {
        "content": "Hi :) It's  `lastIndexOf`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "lastIndexOf()",
        "slug": "array/lastindexof"
      },
      "array/map": {
        "content": "`map`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "map()",
        "slug": "array/map"
      },
      "array/pop": {
        "content": "`pop`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "pop()",
        "slug": "array/pop"
      },
      "array/push": {
        "content": "`push`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "push()",
        "slug": "array/push"
      },
      "array/reduce": {
        "content": "`reduce`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "reduce()",
        "slug": "array/reduce"
      },
      "array/reduceright": {
        "content": "Hi :) It's `reduceRight`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "reduceRight()",
        "slug": "array/reduceright"
      },
      "array/reverse": {
        "content": "`reverse`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "reverse()",
        "slug": "array/reverse"
      },
      "array/shift": {
        "content": "`shift`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "shift()",
        "slug": "array/shift"
      },
      "array/slice": {
        "content": "`slice`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "slice()",
        "slug": "array/slice"
      },
      "array/some": {
        "content": "`some`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "some()",
        "slug": "array/some"
      },
      "array/sort": {
        "content": "Hi :) It's `sort`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "sort()",
        "slug": "array/sort"
      },
      "array/splice": {
        "content": "`splice`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "splice()",
        "slug": "array/splice"
      },
      "array/tolocalestring": {
        "content": "Hi :) It's `toLocaleString`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toLocaleString()",
        "slug": "array/tolocalestring"
      },
      "array/toreversed": {
        "content": "`toReversed`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toReversed()",
        "slug": "array/toreversed"
      },
      "array/tosorted": {
        "content": "`toSorted`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toSorted()",
        "slug": "array/tosorted"
      },
      "array/tospliced": {
        "content": "`toSpliced`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toSpliced()",
        "slug": "array/tospliced"
      },
      "array/tostring": {
        "content": "`toString`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toString()",
        "slug": "array/tostring"
      },
      "array/unshift": {
        "content": "`unshift`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "unshift()",
        "slug": "array/unshift"
      },
      "array/values": {
        "content": "`values`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "values()",
        "slug": "array/values"
      },
      "array/with": {
        "content": "`with`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "with()",
        "slug": "array/with"
      }
    },
    "string": {
      "string/anchor": {
        "content": "`anchor`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "anchor()",
        "slug": "string/anchor"
      },
      "string/at": {
        "content": "`at`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "at()",
        "slug": "string/at"
      },
      "string/big": {
        "content": "`big`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "big()",
        "slug": "string/big"
      },
      "string/blink": {
        "content": "`blink`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "blink()",
        "slug": "string/blink"
      },
      "string/bold": {
        "content": "`bold`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "bold()",
        "slug": "string/bold"
      },
      "string/charat": {
        "content": "`charAt`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "charAt()",
        "slug": "string/charat"
      },
      "string/charcodeat": {
        "content": "`charCodeAt`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "charCodeAt()",
        "slug": "string/charcodeat"
      },
      "string/codepointat": {
        "content": "`codePointAt`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "codePointAt()",
        "slug": "string/codepointat"
      },
      "string/concat": {
        "content": "`concat`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "concat()",
        "slug": "string/concat"
      },
      "string/endswith": {
        "content": "`endsWith`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "endsWith()",
        "slug": "string/endswith"
      },
      "string/fixed": {
        "content": "`fixed`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "fixed()",
        "slug": "string/fixed"
      },
      "string/fontcolor": {
        "content": "`fontcolor`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "fontcolor()",
        "slug": "string/fontcolor"
      },
      "string/fontsize": {
        "content": "`fontsize`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "fontsize()",
        "slug": "string/fontsize"
      },
      "string/includes": {
        "content": "`includes`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "includes()",
        "slug": "string/includes"
      },
      "string/indexof": {
        "content": "`indexOf`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "indexOf()",
        "slug": "string/indexof"
      },
      "string/iswellformed": {
        "content": "`isWellFormed`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "isWellFormed()",
        "slug": "string/iswellformed"
      },
      "string/italics": {
        "content": "`italics`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "italics()",
        "slug": "string/italics"
      },
      "string/lastindexof": {
        "content": "`lastIndexOf`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "lastIndexOf()",
        "slug": "string/lastindexof"
      },
      "string/link": {
        "content": "`link`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "link()",
        "slug": "string/link"
      },
      "string/localecompare": {
        "content": "`localeCompare`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "localeCompare()",
        "slug": "string/localecompare"
      },
      "string/match": {
        "content": "`match`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "match()",
        "slug": "string/match"
      },
      "string/matchall": {
        "content": "`matchAll`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "matchAll()",
        "slug": "string/matchall"
      },
      "string/normalize": {
        "content": "`normalize`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "normalize()",
        "slug": "string/normalize"
      },
      "string/padend": {
        "content": "`padEnd`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "padEnd()",
        "slug": "string/padend"
      },
      "string/padstart": {
        "content": "`padStart`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "padStart()",
        "slug": "string/padstart"
      },
      "string/repeat": {
        "content": "`repeat`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "repeat()",
        "slug": "string/repeat"
      },
      "string/replace": {
        "content": "`replace`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "replace()",
        "slug": "string/replace"
      },
      "string/replaceall": {
        "content": "`replaceAll`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "replaceAll()",
        "slug": "string/replaceall"
      },
      "string/search": {
        "content": "`search`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "search()",
        "slug": "string/search"
      },
      "string/slice": {
        "content": "Hi :) It's `slice`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "slice()",
        "slug": "string/slice"
      },
      "string/small": {
        "content": "`small`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "small()",
        "slug": "string/small"
      },
      "string/split": {
        "content": "Hi :) It's `split`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "split()",
        "slug": "string/split"
      },
      "string/startswith": {
        "content": "`startsWith`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "startsWith()",
        "slug": "string/startswith"
      },
      "string/strike": {
        "content": "`strike`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "strike()",
        "slug": "string/strike"
      },
      "string/stringfromcharcode": {
        "content": "`String.fromCharCode`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "String.fromCharCode()",
        "slug": "string/stringfromcharcode"
      },
      "string/stringfromcodepoint": {
        "content": "`String.fromCodePoint`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "String.fromCodePoint()",
        "slug": "string/stringfromcodepoint"
      },
      "string/stringraw": {
        "content": "`String.raw`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "String.raw()",
        "slug": "string/stringraw"
      },
      "string/sub": {
        "content": "`sub`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "sub()",
        "slug": "string/sub"
      },
      "string/substr": {
        "content": "`substr`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "substr()",
        "slug": "string/substr"
      },
      "string/substring": {
        "content": "`substring`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "substring()",
        "slug": "string/substring"
      },
      "string/sup": {
        "content": "`sup`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "sup()",
        "slug": "string/sup"
      },
      "string/tolocalelowercase": {
        "content": "`toLocaleLowerCase`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toLocaleLowerCase()",
        "slug": "string/tolocalelowercase"
      },
      "string/tolocaleuppercase": {
        "content": "`toLocaleUpperCase`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toLocaleUpperCase()",
        "slug": "string/tolocaleuppercase"
      },
      "string/tolowercase": {
        "content": "`toLowerCase`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toLowerCase()",
        "slug": "string/tolowercase"
      },
      "string/tostring": {
        "content": "`toString`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toString()",
        "slug": "string/tostring"
      },
      "string/touppercase": {
        "content": "`toUpperCase`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toUpperCase()",
        "slug": "string/touppercase"
      },
      "string/towellformed": {
        "content": "`toWellFormed`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toWellFormed()",
        "slug": "string/towellformed"
      },
      "string/trim": {
        "content": "`trim`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "trim()",
        "slug": "string/trim"
      },
      "string/trimend": {
        "content": "`trimEnd`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "trimEnd()",
        "slug": "string/trimend"
      },
      "string/trimstart": {
        "content": "`trimStart`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "trimStart()",
        "slug": "string/trimstart"
      },
      "string/valueof": {
        "content": "`valueOf`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "valueOf",
        "slug": "string/valueof"
      }
    }
  },
  "ru": {
    "array": {
      "array/arrayfrom": {
        "content": "Метод `Array.from()` создаёт новый экземпляр `Array` из массивоподобного или итерируемого объекта.\r\n\r\n##### Использование\r\n\r\n```js\r\nArray.of(7); // [7]\r\nArray.of(1, 2, 3); // [1, 2, 3]\r\n\r\nArray(7); // массив с 7 пустыми слотами\r\nArray(1, 2, 3); // [1, 2, 3]\r\n```\r\n\r\n##### Примерная внутренняя реализация\r\n\r\n```js\r\n// n = items.length\r\n// k = mapfn\r\n\r\n// this = Array (Array.from(...)) / someArray (someArray.from(...))\r\nArray.from = function(items, mapfn, thisArg) {\r\n  // 1. Определяем C как текущее значение this\r\n  let C = this;\r\n\r\n  // 2. Если mapfn не определен, устанавливаем mapping в false\r\n  // 3. Иначе, если mapfn не является вызываемой функцией, \r\n  // выбрасываем исключение TypeError\r\n  // и устанавливаем mapping в true\r\n  let mapping;\r\n  if (mapfn === undefined) {\r\n    mapping = false;\r\n  } else {\r\n    if (!IsCallable(mapfn)) {\r\n      throw new TypeError();\r\n    }\r\n    mapping = true;\r\n  }\r\n\r\n  // 4. Получаем метод @@iterator из items\r\n  let usingIterator = GetMethod(items, Symbol.iterator);\r\n\r\n  // 5. Если usingIterator определен, выполняем следующие шаги\r\n  if (usingIterator !== undefined) {\r\n    // a. Если C является конструктором, устанавливаем A как новый объект, созданный с помощью C\r\n    // b. Иначе устанавливаем A как новый массив с длиной 0\r\n    let A = (IsConstructor(C)) ? Construct(C) : ArrayCreate(0);\r\n\r\n    // c. Получаем итератор для items\r\n    let iteratorRecord = GetIteratorFromMethod(items, usingIterator);\r\n\r\n    // d. Устанавливаем k в 0\r\n    let k = 0;\r\n\r\n    // e. Повторяем\r\n    while (true) {\r\n      // i. Если k >= 2^53 - 1, выбрасываем исключение TypeError\r\n      // и закрываем итератор\r\n      if (k >= 2**53 - 1) {\r\n        let error = ThrowCompletion(new TypeError());\r\n        return IteratorClose(iteratorRecord, error);\r\n      }\r\n\r\n      // ii. Переводим k в строку Pk\r\n      let Pk = ToString(𝔽(k));\r\n\r\n      // iii. Получаем следующее значение из итератора\r\n      let next = IteratorStepValue(iteratorRecord);\r\n\r\n      // iv. Если next равно DONE, устанавливаем длину A в k и возвращаем A\r\n      if (next === DONE) {\r\n        Set(A, \"length\", 𝔽(k), true);\r\n        return A;\r\n      }\r\n\r\n      // v. Если mapping равно true, вызываем mapfn с аргументами next и 𝔽(k),\r\n      //    присваиваем результат переменной mappedValue\r\n      let mappedValue = (mapping) ? Call(mapfn, thisArg, [next, 𝔽(k)]) : next;\r\n\r\n      // vi. Устанавливаем Pk в mappedValue в объекте A\r\n      let defineStatus = CreateDataPropertyOrThrow(A, Pk, mappedValue);\r\n\r\n      // vii. Если возникло исключение при выполнении defineStatus, закрываем итератор\r\n      IfAbruptCloseIterator(defineStatus, iteratorRecord);\r\n\r\n      // viii. Увеличиваем k на 1\r\n      k = k + 1;\r\n    }\r\n  }\r\n\r\n  // 6. Примечание: items не является итерируемым, поэтому предполагаем, что это объект похожий на массив\r\n\r\n  // 7. Преобразуем items в объект arrayLike\r\n  let arrayLike = ToObject(items);\r\n\r\n  // 8. Получаем длину arrayLike\r\n  let len = LengthOfArrayLike(arrayLike);\r\n\r\n  // 9. Если C является конструктором, устанавливаем A как новый объект, созданный с помощью C\r\n  // 10. Иначе устанавливаем A как новый массив с длиной len\r\n  let A = (IsConstructor(C)) ? Construct(C, [𝔽(len)]) : ArrayCreate(len);\r\n\r\n  // 11. Устанавливаем k в 0\r\n  let k = 0;\r\n\r\n  // 12. Повторяем, пока k < len\r\n  while (k < len) {\r\n    // a. Переводим k в строку Pk\r\n    let Pk = ToString(𝔽(k));\r\n\r\n    // b. Получаем значение kValue из arrayLike по ключу Pk\r\n    let kValue = Get(arrayLike, Pk);\r\n\r\n    // c. Если mapping равно true, вызываем mapfn с аргументами kValue и 𝔽(k),\r\n    //    присваиваем результат переменной mappedValue\r\n    let mappedValue = (mapping) ? Call(mapfn, thisArg, [kValue, 𝔽(k)]) : kValue;\r\n\r\n    // d. Устанавливаем Pk в mappedValue в объекте A\r\n    CreateDataPropertyOrThrow(A, Pk, mappedValue);\r\n\r\n    // e. Увеличиваем k на 1\r\n    k = k + 1;\r\n  }\r\n\r\n  // 13. Устанавливаем длину A в len\r\n  Set(A, \"length\", 𝔽(len), true);\r\n\r\n  // 14. Возвращаем A\r\n  return A;\r\n};\r\n```\r\n\r\n##### ECMAScript\r\n\r\n```js\r\n1. Let C be the this value.\r\n2. If mapfn is undefined, then\r\n   a. Let mapping be false.\r\n3. Else,\r\n   a. If IsCallable(mapfn) is false, throw a TypeError exception.\r\n   b. Let mapping be true.\r\n4. Let usingIterator be ? GetMethod(items, @@iterator).\r\n5. If usingIterator is not undefined, then\r\n   a. If IsConstructor(C) is true, then\r\n      i. Let A be ? Construct(C).\r\n   b. Else,\r\n      i. Let A be ! ArrayCreate(0).\r\n   c. Let iteratorRecord be ? GetIteratorFromMethod(items, usingIterator).\r\n   d. Let k be 0.\r\n   e. Repeat,\r\n      i. If k ≥ 2**53 - 1, then\r\n         1. Let error be ThrowCompletion(a newly created TypeError object).\r\n         2. Return ? IteratorClose(iteratorRecord, error).\r\n      ii. Let Pk be ! ToString(𝔽(k)).\r\n      iii. Let next be ? IteratorStepValue(iteratorRecord).\r\n      iv. If next is DONE, then\r\n         1. Perform ? Set(A, \"length\", 𝔽(k), true).\r\n         2. Return A.\r\n      v. If mapping is true, then\r\n         1. Let mappedValue be Completion(Call(mapfn, thisArg, « next, 𝔽(k) »)).\r\n         2. IfAbruptCloseIterator(mappedValue, iteratorRecord).\r\n      vi. Else,\r\n         1. Let mappedValue be next.\r\n      vii. Let defineStatus be Completion(CreateDataPropertyOrThrow(A, Pk, mappedValue)).\r\n      viii. IfAbruptCloseIterator(defineStatus, iteratorRecord).\r\n      ix. Set k to k + 1.\r\n6. NOTE: items is not an Iterable so assume it is an array-like object.\r\n7. Let arrayLike be ! ToObject(items).\r\n8. Let len be ? LengthOfArrayLike(arrayLike).\r\n9. If IsConstructor(C) is true, then\r\n   a. Let A be ? Construct(C, « 𝔽(len) »).\r\n10. Else,\r\n   a. Let A be ? ArrayCreate(len).\r\n11. Let k be 0.\r\n12. Repeat, while k < len,\r\n   a. Let Pk be ! ToString(𝔽(k)).\r\n   b. Let kValue be ? Get(arrayLike, Pk).\r\n   c. If mapping is true, then\r\n      i. Let mappedValue be ? Call(mapfn, thisArg, « kValue, 𝔽(k) »).\r\n   d. Else,\r\n      i. Let mappedValue be kValue.\r\n   e. Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).\r\n   f. Set k to k + 1.\r\n13. Perform ? Set(A, \"length\", 𝔽(len), true).\r\n14. Return A.\r\n```\r\n",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n * k)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n)",
          "color": "lightgreen"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.from",
        "title": "Array.from()",
        "slug": "array/arrayfrom"
      },
      "array/arrayfromasync": {
        "content": "Метод `Array.fromAsync()` создаёт новый экземпляр `Array` из асинхронно итерируемого, итерируемого или массивоподобного объекта.\r\n\r\n##### Использование\r\n\r\n```js\r\nconst fetchData = async (url) => {\r\n  try {\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    return json;\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n};\r\n\r\n(async () => {\r\n  const url = 'https://jsonplaceholder.typicode.com/todos';\r\n\r\n  try {\r\n    const todos = await fetchData(url);\r\n\r\n    function mapFunction(todo) {\r\n      return { \r\n        id: todo.id,\r\n        title: todo.title,\r\n      };\r\n    }\r\n\r\n    const processedData = await Array.fromAsync(todos, mapFunction);\r\n\r\n    console.log(processedData);\r\n    /*\r\n    [\r\n      { id: 1, title: \"delectus aut autem\" },\r\n      { id: 2, title: \"quis ut nam facilis et officia qui\" },\r\n      // ...\r\n    ]\r\n    */\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n})();\r\n```\r\n\r\n##### Примерная внутренняя реализация\r\n\r\n```js\r\n// n = asyncItems.length\r\n// k = mapfn\r\n\r\n// this = asyncItems\r\nArray.fromAsync = function(asyncItems, mapfn, thisArg) {\r\n  // 1. Определяем C как текущее значение this\r\n  let C = this;\r\n\r\n  // 2. Создаем promiseCapability, используя \r\n  // внутренний конструктор NewPromiseCapability\r\n  let promiseCapability = NewPromiseCapability(%Promise%);\r\n\r\n  // 3. Создаем абстрактное замыкание fromAsyncClosure, захватывающее C, mapfn и thisArg\r\n  let fromAsyncClosure = function () {\r\n    // 3a. Если mapfn не определено, устанавливаем mapping в false\r\n    // 3b. Иначе,\r\n    // i. Если mapfn не является вызываемой функцией, выбрасываем исключение TypeError\r\n    // ii. Устанавливаем mapping в true\r\n    let mapping = (mapfn === undefined) ? false : true;\r\n\r\n    // 3c. Получаем метод @@asyncIterator объекта asyncItems\r\n    let usingAsyncIterator = GetMethod(asyncItems, @@asyncIterator);\r\n\r\n    // 3d. Если метод @@asyncIterator не определен, получаем метод @@iterator\r\n    // 3e. Создаем переменную iteratorRecord и устанавливаем ее в undefined\r\n    let usingSyncIterator = (usingAsyncIterator === undefined) ? GetMethod(asyncItems, @@iterator) : undefined;\r\n    let iteratorRecord;\r\n\r\n    // 3f. Если метод @@asyncIterator определен, получаем итератор с использованием ASYNC\r\n    // 3g. Иначе, если метод @@iterator определен, создаем асинхронный итератор с использованием SYNC\r\n    if (usingAsyncIterator !== undefined) {\r\n      iteratorRecord = GetIterator(asyncItems, ASYNC, usingAsyncIterator);\r\n    } else if (usingSyncIterator !== undefined) {\r\n      iteratorRecord = CreateAsyncFromSyncIterator(GetIterator(asyncItems, SYNC, usingSyncIterator));\r\n    }\r\n\r\n    // 3h. Если iteratorRecord определен, выполняем шаги для обработки массивоподобного объекта\r\n    if (iteratorRecord !== undefined) {\r\n      // 3h(i). Если C является конструктором, создаем новый массив A\r\n      // 3h(ii). Иначе, создаем новый массив A с длиной 0\r\n      let A = (IsConstructor(C) === true) ? Construct(C) : ArrayCreate(0);\r\n\r\n      // 3h(iii). Устанавливаем k в 0\r\n      let k = 0;\r\n\r\n      // 3h(iv). Повторяем следующее:\r\n      while (true) {\r\n        // 1. Если k >= 2**53 - 1, выбрасываем исключение TypeError\r\n        if (k >= 2**53 - 1) {\r\n          let error = ThrowCompletion(new TypeError());\r\n          return AsyncIteratorClose(iteratorRecord, error);\r\n        }\r\n\r\n        // 2. Получаем строковое представление числа k\r\n        let Pk = ToString(𝔽(k));\r\n\r\n        // 3. Вызываем метод [[NextMethod]] итератора и получаем результат\r\n        let nextResult = Call(iteratorRecord.[[NextMethod]], iteratorRecord.[[Iterator]]);\r\n\r\n        // 4. Ожидаем результат, так как итератор может возвращать Promise\r\n        nextResult = Await(nextResult);\r\n\r\n        // 5. Если результат не является объектом, \r\n        // выбрасываем исключение TypeError\r\n        if (!IsObject(nextResult)) {\r\n          throw new TypeError();\r\n        }\r\n\r\n        // 6. Проверяем, завершен ли итератор\r\n        let done = IteratorComplete(nextResult);\r\n\r\n        if (done === true) {\r\n          // 7. Если завершен, устанавливаем \r\n          // длину массива A в k и возвращаем A\r\n          Set(A, \"length\", 𝔽(k), true);\r\n          return { [[Type]]: RETURN, [[Value]]: A, [[Target]]: EMPTY };\r\n        }\r\n\r\n        // 8. Получаем значение из результата итератора\r\n        let nextValue = IteratorValue(nextResult);\r\n\r\n        // 9. Если mapping истинно, вызываем mapfn \r\n        // с thisArg и аргументами nextValue и k\r\n        let mappedValue = (mapping === true) ? Call(mapfn, thisArg, [nextValue, 𝔽(k)]) : nextValue;\r\n\r\n        let mappedValue;\r\n        // 9. Если mapping истинно,\r\n        if (mapping === true) {\r\n          // a. Вызываем mapfn с thisArg и аргументами nextValue и k\r\n          mappedValue = Call(mapfn, thisArg, [nextValue, 𝔽(k)]);\r\n          // b. Если вызов функции mapfn завершен с ошибкой, то закрываем итератор\r\n          ifAbruptCloseAsyncIterator(mappedValue, iteratorRecord);\r\n          // c. Если все хорошо, ожидаем результат,\r\n          // так как mapfn может возвращать Promise\r\n          mappedValue = Await(mappedValue);\r\n          // d. Если вызов функции mapfn завершен с ошибкой, то закрываем итератор\r\n          ifAbruptCloseAsyncIterator(mappedValue, iteratorRecord);\r\n        } else {\r\n          // 10. Если mapping ложно, устанавливаем mappedValue в nextValue\r\n          mappedValue = nextValue;\r\n        }\r\n\r\n        // 11. Создаем свойство в массиве A \r\n        // с ключом Pk и значением mappedValue\r\n        let defineStatus = CreateDataPropertyOrThrow(A, Pk, mappedValue);\r\n\r\n        // Если выполнение функции выше завершается с ошибкой, то закрываем итератор\r\n        if (defineStatus instanceof Completion) {\r\n          return AsyncIteratorClose(iteratorRecord, defineStatus);\r\n        }\r\n\r\n        // 13. Увеличиваем k на 1 и повторяем шаги\r\n        k = k + 1;\r\n      }\r\n    } else {\r\n      // 3i. NOTE: asyncItems не является AsyncIterable \r\n      // или Iterable, поэтому предполагаем, что это массивоподобный объект.\r\n      // 3ii. Получаем массивоподобный объект arrayLike\r\n      let arrayLike = ToObject(asyncItems);\r\n\r\n      // 3iii. Получаем длину arrayLike\r\n      let len = LengthOfArrayLike(arrayLike);\r\n\r\n      // 3iv. Если C является конструктором,\r\n      // создаем новый массив A с длиной len\r\n      // 3v. Иначе, создаем новый массив A\r\n      let A = (IsConstructor(C) === true) ? Construct(C, [𝔽(len)]) : ArrayCreate(len);\r\n\r\n      // 3vi. Устанавливаем k в 0\r\n      let k = 0;\r\n\r\n      // 3vii. Повторяем следующее, пока k < len\r\n      while (k < len) {\r\n        // 1. Получаем строковое представление числа k\r\n        let Pk = ToString(𝔽(k));\r\n        // 2. Получаем значение k-го элемента arrayLike\r\n        let kValue = Get(arrayLike, Pk);\r\n        // 3. Ожидаем значение, так как\r\n        // элемент массива может быть Promise\r\n        kValue = Await(kValue);\r\n\r\n        let mappedValue;\r\n        // 4. Если mapping истинно\r\n        if (mapping === true) {\r\n          // a. Вызываем mapfn с thisArg и аргументами kValue и k\r\n          mappedValue = Call(mapfn, thisArg, [kValue, 𝔽(k)]);\r\n          // b. Ожидаем результат, так как mapfn может возвращать Promise\r\n          mappedValue = Await(mappedValue);\r\n        } else {\r\n          // 5. Если mapping ложно, устанавливаем mappedValue в kValue\r\n          mappedValue = kValue;\r\n        }\r\n\r\n        // 6. Создаем свойство в массиве A\r\n        // с ключом Pk и значением mappedValue\r\n        CreateDataPropertyOrThrow(A, Pk, mappedValue);\r\n\r\n        // 7. Увеличиваем k на 1 и повторяем шаги\r\n        k = k + 1;\r\n      }\r\n\r\n      // 3viii. Устанавливаем длину массива A в len\r\n      Set(A, \"length\", 𝔽(len), true);\r\n\r\n      // 3ix. Возвращаем массив A\r\n      return { [[Type]]: RETURN, [[Value]]: A, [[Target]]: EMPTY };\r\n    }\r\n  };\r\n\r\n  // 4. Запускаем выполнение асинхронной функции \r\n  // AsyncFunctionStart с promiseCapability \r\n  // и fromAsyncClosure в качестве аргументов\r\n  AsyncFunctionStart(promiseCapability, fromAsyncClosure);\r\n\r\n  // 5. Возвращаем promiseCapability.[[Promise]]\r\n  return promiseCapability.[[Promise]];\r\n};\r\n```\r\n\r\n##### ECMAScript\r\n\r\n```js\r\n1. Let C be the this value.\r\n2. If mapfn is undefined, then\r\n   a. Let mapping be false.\r\n3. Else,\r\n   a. If IsCallable(mapfn) is false, throw a TypeError exception.\r\n   b. Let mapping be true.\r\n4. Let usingIterator be ? GetMethod(items, @@iterator).\r\n5. If usingIterator is not undefined, then\r\n   a. If IsConstructor(C) is true, then\r\n      i. Let A be ? Construct(C).\r\n   b. Else,\r\n      i. Let A be ! ArrayCreate(0).\r\n   c. Let iteratorRecord be ? GetIteratorFromMethod(items, usingIterator).\r\n   d. Let k be 0.\r\n   e. Repeat,\r\n      i. If k ≥ 2**53 - 1, then\r\n         1. Let error be ThrowCompletion(a newly created TypeError object).\r\n         2. Return ? IteratorClose(iteratorRecord, error).\r\n      ii. Let Pk be ! ToString(𝔽(k)).\r\n      iii. Let next be ? IteratorStepValue(iteratorRecord).\r\n      iv. If next is DONE, then\r\n         1. Perform ? Set(A, \"length\", 𝔽(k), true).\r\n         2. Return A.\r\n      v. If mapping is true, then\r\n         1. Let mappedValue be Completion(Call(mapfn, thisArg, « next, 𝔽(k) »)).\r\n         2. IfAbruptCloseIterator(mappedValue, iteratorRecord).\r\n      vi. Else,\r\n         1. Let mappedValue be next.\r\n      vii. Let defineStatus be Completion(CreateDataPropertyOrThrow(A, Pk, mappedValue)).\r\n      viii. IfAbruptCloseIterator(defineStatus, iteratorRecord).\r\n      ix. Set k to k + 1.\r\n6. NOTE: items is not an Iterable so assume it is an array-like object.\r\n7. Let arrayLike be ! ToObject(items).\r\n8. Let len be ? LengthOfArrayLike(arrayLike).\r\n9. If IsConstructor(C) is true, then\r\n   a. Let A be ? Construct(C, « 𝔽(len) »).\r\n10. Else,\r\n   a. Let A be ? ArrayCreate(len).\r\n11. Let k be 0.\r\n12. Repeat, while k < len,\r\n   a. Let Pk be ! ToString(𝔽(k)).\r\n   b. Let kValue be ? Get(arrayLike, Pk).\r\n   c. If mapping is true, then\r\n      i. Let mappedValue be ? Call(mapfn, thisArg, « kValue, 𝔽(k) »).\r\n   d. Else,\r\n      i. Let mappedValue be kValue.\r\n   e. Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).\r\n   f. Set k to k + 1.\r\n13. Perform ? Set(A, \"length\", 𝔽(len), true).\r\n14. Return A.\r\n```",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n * k)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n)",
          "color": "lightgreen"
        },
        "esLink": "https://tc39.es/proposal-array-from-async/#sec-array.fromAsync",
        "title": "Array.fromAsync()",
        "slug": "array/arrayfromasync"
      },
      "array/arrayisarray": {
        "content": "Метод `Array.isArray()` возвращает `true`, если объект является массивом и `false`, если он массивом не является.\r\n\r\n##### Использование\r\n\r\n```js\r\n// true:\r\nArray.isArray([]);\r\nArray.isArray([1]);\r\nArray.isArray(new Array());\r\nArray.isArray(Array.prototype);\r\n\r\n// false:\r\nArray.isArray();\r\nArray.isArray({});\r\nArray.isArray(null);\r\nArray.isArray(undefined);\r\nArray.isArray(17);\r\nArray.isArray(\"Array\");\r\nArray.isArray(true);\r\nArray.isArray(false);\r\nArray.isArray({ __proto__: Array.prototype });\r\n```\r\n\r\n##### Примерная внутренняя реализация\r\n\r\n```js\r\nArray.isArray = function(arg) {\r\n  return isArray(arg);\r\n};\r\n```\r\n\r\n##### ECMAScript\r\n\r\n```js\r\n1. Return ? IsArray(arg).\r\n```",
        "tc": {
          "best": {
            "title": "O(1)",
            "color": "green"
          },
          "average": {
            "title": "O(1)",
            "color": "green"
          },
          "worst": {
            "title": "O(1)",
            "color": "green"
          }
        },
        "sc": {
          "title": "O(1)",
          "color": "green"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.isarray",
        "title": "Array.isArray()",
        "slug": "array/arrayisarray"
      },
      "array/arrayof": {
        "content": "Метод `Array.of()` создаёт новый экземпляр массива `Array` из произвольного числа аргументов, вне зависимости от числа или типа аргумента.\r\n\r\nРазница между `Array.of()` и конструктором `Array` заключается в обработке целочисленных аргументов: `Array.of(7)` создаёт массив с одним элементом 7, а `Array(7)` создаёт пустой массив со значением свойства `length` равным 7 (Замечание: подразумевается 7 пустых слотов, а не слоты со значением `undefined`).\r\n\r\n##### Использование\r\n\r\n```js\r\n// true:\r\nArray.of(7); // [7]\r\nArray.of(1, 2, 3); // [1, 2, 3]\r\n\r\nArray(7); // массив с 7 пустыми слотами\r\nArray(1, 2, 3); // [1, 2, 3]\r\n```\r\n\r\n##### Примерная внутренняя реализация\r\n\r\n```js\r\n// n = items.length\r\n\r\n// this = C\r\nArray.of = function(...items) {\r\n  // 1. Получаем количество элементов в items\r\n  let len = items.length;\r\n\r\n  // 2. Получаем целое число lenNumber\r\n  let lenNumber = 𝔽(len);\r\n\r\n  // 3. Получаем this value\r\n  let C = this;\r\n\r\n  // 4. Если IsConstructor(C) равно true\r\n  if (IsConstructor(C)) {\r\n    // a. Создаем массив A с использованием C в качестве конструктора и lenNumber в качестве аргумента\r\n    let A = Construct(C, [lenNumber]);\r\n  } else {\r\n    // b. Иначе создаем массив A с использованием ArrayCreate и len в качестве аргумента\r\n    let A = ArrayCreate(len);\r\n  }\r\n\r\n  // 6. Инициализируем счетчик k\r\n  let k = 0;\r\n\r\n  // 7. Повторяем, пока k < len\r\n  while (k < len) {\r\n    // a. Получаем значение k-го элемента\r\n    let kValue = items[k];\r\n\r\n    // b. Преобразуем k в строку и получаем Pk\r\n    let Pk = ToString(𝔽(k));\r\n\r\n    // c. Создаем свойство с ключом Pk и значением kValue в массиве A\r\n    CreateDataPropertyOrThrow(A, Pk, kValue);\r\n\r\n    // d. Увеличиваем счетчик k\r\n    k = k + 1;\r\n  }\r\n\r\n  // 8. Устанавливаем длину массива A в значение lenNumber\r\n  Set(A, \"length\", lenNumber, true);\r\n\r\n  // 9. Возвращаем созданный массив A\r\n  return A;\r\n};\r\n```\r\n\r\n##### ECMAScript\r\n\r\n```js\r\n1. Let len be the number of elements in items.\r\n2. Let lenNumber be 𝔽(len).\r\n3. Let C be the this value.\r\n4. If IsConstructor(C) is true, then\r\n   a. Let A be ? Construct(C, « lenNumber »).\r\n5. Else,\r\n   a. Let A be ? ArrayCreate(len).\r\n6. Let k be 0.\r\n7. Repeat, while k < len,\r\n   a. Let kValue be items[k].\r\n   b. Let Pk be ! ToString(𝔽(k)).\r\n   c. Perform ? CreateDataPropertyOrThrow(A, Pk, kValue).\r\n   d. Set k to k + 1.\r\n8. Perform ? Set(A, \"length\", lenNumber, true).\r\n9. Return A.\r\n```",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n)",
            "color": "lightgreen"
          }
        },
        "sc": {
          "title": "O(n)",
          "color": "lightgreen"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.of",
        "title": "Array.of()",
        "slug": "array/arrayof"
      },
      "array/at": {
        "content": "Метод `at()` принимает значение в виде целого числа и возвращает элемент массива с данным индексом. В качестве аргумента метод принимает положительные и отрицательные числа. При отрицательном значении отсчёт происходит с конца массива.\r\n\r\n##### Использование\r\n\r\n```js\r\nconst arr = [1, 3, 2];\r\n\r\nconsole.log(arr.at(1)); // 3\r\nconsole.log(arr.at(-1)); // 2\r\nconsole.log(arr.at(3)); // undefined\r\n```\r\n\r\n##### Примерная внутренняя реализация\r\n\r\n```js\r\n// this = arr\r\nArray.prototype.at = function(index) {\r\n  // 1. Преобразуем this в объект, если это необходимо\r\n  // Здесь это не нужно, так как arr уже является объектом\r\n  // (массив - это объект)\r\n  let obj = ToObject(this);\r\n\r\n  // 2. Получаем длину массивоподобного объекта obj\r\n  let len = LengthOfArrayLike(obj);\r\n\r\n  // 3. Преобразуем полученный индекс в целое число (или бесконечность)\r\n  let relativeIndex = ToIntegerOrInfinity(index);\r\n\r\n  // 4. Если relativeIndex >= 0, устанавливаем k = relativeIndex\r\n  // 5. Иначе устанавливаем k = len + relativeIndex\r\n  let k = (relativeIndex >= 0) ? relativeIndex : (len + relativeIndex);\r\n\r\n  // 6. Если k выходит за пределы arr, возвращаем undefined\r\n  if (k < 0 || k >= len) {\r\n    return undefined;\r\n  }\r\n\r\n  // 7. Возвращаем значение, полученное из объекта obj по ключу k\r\n  return Get(obj, !ToString(𝔽(k)));\r\n};\r\n```\r\n\r\n##### ECMAScript\r\n\r\n```js\r\n1. Let O be ? ToObject(this value).\r\n2. Let len be ? LengthOfArrayLike(O).\r\n3. Let relativeIndex be ? ToIntegerOrInfinity(index).\r\n4. If relativeIndex ≥ 0, then\r\n  a. Let k be relativeIndex.\r\n5. Else,\r\n  a. Let k be len + relativeIndex.\r\n6. If k < 0 or k ≥ len, return undefined.\r\n7. Return ? Get(O, ! ToString(𝔽(k))).\r\n```",
        "tc": {
          "best": {
            "title": "O(1)",
            "color": "green"
          },
          "average": {
            "title": "O(1)",
            "color": "green"
          },
          "worst": {
            "title": "O(1)",
            "color": "green"
          }
        },
        "sc": {
          "title": "O(1)",
          "color": "green"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.at",
        "title": "at()",
        "slug": "array/at"
      },
      "array/concat": {
        "content": "Метод `concat()` возвращает новый массив, состоящий из массива, на котором он был вызван, соединённого с другими массивами и/или значениями, переданными в качестве аргументов.\r\n\r\n##### Использование\r\n\r\n```js\r\nconst arr1 = ['a', 'b', 'c'];\r\nconst arr2 = ['d', 'e', 'f'];\r\nconst g = 'g';\r\nconst arr3 = arr1.concat(arr2, g);\r\n\r\nconsole.log(arr3); // ['a', 'b', 'c', 'd', 'e', 'f', 'g']\r\n```\r\n\r\n##### Примерная внутренняя реализация\r\n\r\n```js\r\n// n = arr1.length\r\n// m = items.length\r\n// k = items[i].length (max)\r\n\r\n// this = arr1\r\nArray.prototype.concat = function(...items) {\r\n  // 1. Преобразуем this в объект, если это необходимо\r\n  // Здесь это не нужно, так как arr1 уже является объектом\r\n  // (массив - это объект)\r\n  let obj = ToObject(this);\r\n\r\n  // 2. Создаем новый массив A длины 0\r\n  let A = ArraySpeciesCreate(obj, 0);\r\n\r\n  // 3. Инициализируем счетчик n\r\n  let n = 0;\r\n\r\n  // 4. Добавляем obj в начало items\r\n  items.unshift(obj);\r\n\r\n  // 5. Для каждого элемента E в items\r\n  for (const E of items) {\r\n    // a. Проверяем, расширяем ли элемент\r\n    let spreadable = IsConcatSpreadable(E);\r\n\r\n    // b. Если расширяем\r\n    if (spreadable === true) {\r\n      // i. Получаем длину массивоподобного объекта E\r\n      let len = LengthOfArrayLike(E);\r\n\r\n      // ii. Проверяем, не превысит ли длина нового массива максимальное значение\r\n      if (n + len > 2**53 - 1) {\r\n        throw new TypeError(\"Concatenation result exceeds the maximum array length\");\r\n      }\r\n\r\n      // iii. Инициализируем счетчик k\r\n      let k = 0;\r\n\r\n      // iv. Повторяем, пока k < len\r\n      while (k < len) {\r\n        // 1. Получаем строковое представление индекса k\r\n        let Pk = ToString(𝔽(k));\r\n\r\n        // 2. Проверяем, существует ли свойство с индексом k в E\r\n        let exists = HasProperty(E, Pk);\r\n\r\n        // 3. Если свойство существует\r\n        if (exists === true) {\r\n          // a. Получаем подэлемент под индексом k\r\n          let subElement = Get(E, Pk);\r\n\r\n          // b. Добавляем подэлемент в новый массив\r\n          CreateDataPropertyOrThrow(A, ToString(𝔽(n)), subElement);\r\n        }\r\n\r\n        // 4. Увеличиваем счетчик n и k\r\n        n = n + 1;\r\n        k = k + 1;\r\n      }\r\n    } else {\r\n      // c. Если нерасширяем\r\n      // i. Добавляем элемент E в новый массив\r\n      CreateDataPropertyOrThrow(A, ToString(𝔽(n)), E);\r\n\r\n      // ii. Увеличиваем счетчик n\r\n      n = n + 1;\r\n    }\r\n  }\r\n\r\n  // 6. Устанавливаем длину нового массива в значение n\r\n  Set(A, \"length\", 𝔽(n), true);\r\n\r\n  // 7. Возвращаем новый массив\r\n  return A;\r\n};\r\n```\r\n\r\n##### ECMAScript\r\n\r\n```js\r\n1. Let O be ? ToObject(this value).\r\n2. Let A be ? ArraySpeciesCreate(O, 0).\r\n3. Let n be 0.\r\n4. Prepend O to items.\r\n5. For each element E of items, do\r\n  a. Let spreadable be ? IsConcatSpreadable(E).\r\n  b. If spreadable is true, then\r\n    i. Let len be ? LengthOfArrayLike(E).\r\n    ii. If n + len > 253 - 1, throw a TypeError exception.\r\n    iii. Let k be 0.\r\n    iv. Repeat, while k < len,\r\n      1. Let P be ! ToString(𝔽(k)).\r\n      2. Let exists be ? HasProperty(E, P).\r\n      3. If exists is true, then\r\n        a. Let subElement be ? Get(E, P).\r\n        b. Perform ? CreateDataPropertyOrThrow(A, ! ToString(𝔽(n)), subElement).\r\n      4. Set n to n + 1.\r\n      5. Set k to k + 1.\r\n  c. Else,\r\n    i. NOTE: E is added as a single item rather than spread.\r\n    ii. If n ≥ 253 - 1, throw a TypeError exception.\r\n    iii. Perform ? CreateDataPropertyOrThrow(A, ! ToString(𝔽(n)), E).\r\n    iv. Set n to n + 1.\r\n6. Perform ? Set(A, \"length\", 𝔽(n), true).\r\n7. Return A.\r\n```",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n + m * k)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n + m * k)",
          "color": "limegreen"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.concat",
        "title": "concat()",
        "slug": "array/concat"
      },
      "array/copywithin": {
        "content": "Метод `copyWithin()` копирует последовательность элементов массива внутри него в позицию, начинающуюся по индексу `target`. Копия берётся по индексам, задаваемым вторым и третьим аргументами `start` и `end` (могут быть отрицательными, тогда отсчет происходит с конца массива). Аргумент `end` является необязательным и по умолчанию равен длине массива.\r\n\r\n##### Использование\r\n\r\n```js\r\nconst arr1 = [1, 2, 3, 4, 5];\r\narr1.copyWithin(0, 3);\r\n// [4, 5, 3, 4, 5]\r\n\r\nconst arr2 = [1, 2, 3, 4, 5];\r\narr2.copyWithin(0, 3, 4);\r\n// [4, 2, 3, 4, 5]\r\n\r\nconst arr3 = [1, 2, 3, 4, 5];\r\narr3.copyWithin(0, -2, -1);\r\n// [4, 2, 3, 4, 5]\r\n```\r\n\r\n##### Примерная внутренняя реализация\r\n\r\n```js\r\n// n = count\r\n\r\n// this = arr\r\nArray.prototype.copyWithin = function(target, start, end = this.length) {\r\n  // 1. Преобразуем this в объект, если это необходимо\r\n  // Здесь это не нужно, так как arr уже является объектом\r\n  // (массив - это объект)\r\n  let obj = ToObject(this);\r\n\r\n  // 2. Получаем длину массивоподобного объекта\r\n  let len = LengthOfArrayLike(obj);\r\n\r\n  // 3. Создаем relativeTarget = target, преобразованный в целое число или бесконечность\r\n  let relativeTarget = ToIntegerOrInfinity(target);\r\n\r\n  // 4-6. Вычисляем индекс to (куда будем копировать)\r\n  let to;\r\n\r\n  if (relativeTarget === -Infinity) {\r\n    to = 0;\r\n  } else if (relativeTarget < 0) { // если target отрицательный\r\n    to = max(len + relativeTarget, 0);\r\n  } else {\r\n    to = min(relativeTarget, len);\r\n  }\r\n\r\n  // 7. Создаем relativeStart = start, преобразованный в целое число или бесконечность\r\n  let relativeStart = ToIntegerOrInfinity(start);\r\n\r\n  // 8-10. Вычисляем начальный индекс для копирования\r\n  let from;\r\n\r\n  if (relativeStart === -Infinity) {\r\n    from = 0;\r\n  } else if (relativeStart < 0) {\r\n    from = max(len + relativeStart, 0);\r\n  } else {\r\n    from = min(relativeStart, len);\r\n  }\r\n\r\n  // 11. Если end равен undefined, то relativeEnd = len,\r\n  // иначе преобразуем end в целое число или бексконечность\r\n  let relativeEnd;\r\n  if (end === undefined) {\r\n    relativeEnd = len;\r\n  } else {\r\n    relativeEnd = ToIntegerOrInfinity(end);\r\n  }\r\n\r\n  // 12-14. Вычисляем конечный индекс для копирования\r\n  let final;\r\n  if (relativeEnd === -Infinity) {\r\n    final = 0;\r\n  } else if (relativeEnd < 0) {\r\n    final = max(len + relativeEnd, 0);\r\n  } else {\r\n    final = min(relativeEnd, len);\r\n  }\r\n\r\n  // 15. Вычисляем количество элементов для копирования\r\n  let count = min(final - from, len - to);\r\n\r\n  // 16-17. Определяем направление копирования\r\n  let direction;\r\n  if (from < to && to < from + count) {\r\n    direction = -1;\r\n    from = from + count - 1;\r\n    to = to + count - 1;\r\n  } else {\r\n    direction = 1;\r\n  }\r\n\r\n  // 18. Копируем элементы в новый диапазон\r\n  while (count > 0) {\r\n    let fromkey = ToString(𝔽(from));\r\n    let toKey = ToString(𝔽(to));\r\n    let fromPresent = HasProperty(obj, fromKey);\r\n\r\n    if (fromPresent === true) {\r\n      // если элемент есть в obj, копируем его\r\n      let fromVal = Get(obj, fromKey);\r\n      Set(obj, toKey, fromVal, true);\r\n    } else {\r\n      // если элемент отсутствует, удаляем соответствующий\r\n      // элемент в новом диапазоне\r\n      DeletePropertyOrThrow(obj, toKey);\r\n    }\r\n\r\n    from += direction;\r\n    to += direction;\r\n    count--;\r\n  }\r\n\r\n  // 19. Возвращаем измененный массив\r\n  return obj;\r\n};\r\n```\r\n\r\n##### ECMAScript\r\n\r\n```js\r\n1. Let O be ? ToObject(this value).\r\n2. Let len be ? LengthOfArrayLike(O).\r\n3. Let relativeTarget be ? ToIntegerOrInfinity(target).\r\n4. If relativeTarget = -∞, let to be 0.\r\n5. Else if relativeTarget < 0, let to be max(len + relativeTarget, 0).\r\n6. Else, let to be min(relativeTarget, len).\r\n7. Let relativeStart be ? ToIntegerOrInfinity(start).\r\n8. If relativeStart = -∞, let from be 0.\r\n9. Else if relativeStart < 0, let from be max(len + relativeStart, 0).\r\n10. Else, let from be min(relativeStart, len).\r\n11. If end is undefined, let relativeEnd be len; else let relativeEnd be ? ToIntegerOrInfinity(end).\r\n12. If relativeEnd = -∞, let final be 0.\r\n13. Else if relativeEnd < 0, let final be max(len + relativeEnd, 0).\r\n14. Else, let final be min(relativeEnd, len).\r\n15. Let count be min(final - from, len - to).\r\n16. If from < to and to < from + count, then\r\n  a. Let direction be -1.\r\n  b. Set from to from + count - 1.\r\n  c. Set to to to + count - 1.\r\n17. Else,\r\n  a. Let direction be 1.\r\n18. Repeat, while count > 0,\r\n  a. Let fromKey be ! ToString(𝔽(from)).\r\n  b. Let toKey be ! ToString(𝔽(to)).\r\n  c. Let fromPresent be ? HasProperty(O, fromKey).\r\n  d. If fromPresent is true, then\r\n    i. Let fromVal be ? Get(O, fromKey).\r\n    ii. Perform ? Set(O, toKey, fromVal, true).\r\n  e. Else,\r\n    i. Assert: fromPresent is false.\r\n    ii. Perform ? DeletePropertyOrThrow(O, toKey).\r\n  f. Set from to from + direction.\r\n  g. Set to to to + direction.\r\n  h. Set count to count - 1.\r\n19. Return O.\r\n```",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n)",
            "color": "lightgreen"
          }
        },
        "sc": {
          "title": "O(1)",
          "color": "green"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.copywithin",
        "title": "copyWithin()",
        "slug": "array/copywithin"
      },
      "array/entries": {
        "content": "Метод `entries()` возвращает новый объект итератора массива `Array Iterator`, содержащий пары ключ-значение для каждого индекса в массиве.\r\n\r\n##### Использование\r\n\r\n```js\r\nconst arr = ['a', 'b', 'c'];\r\nconst arrEntries = arr.entries();\r\n\r\nconsole.log(arrEntries.next().value); // [0, 'a']\r\nconsole.log(arrEntries.next().value); // [1, 'b']\r\nconsole.log(arrEntries.next().value); // [2, 'c']\r\n```\r\n\r\n##### Примерная внутренняя реализация\r\n\r\n```js\r\n// n = arr.length\r\n\r\n// this = arr\r\nArray.prototype.entries = function() {\r\n  // 1. Преобразуем this в объект, если это необходимо\r\n  // Здесь это не нужно, так как arr уже является объектом\r\n  // (массив - это объект)\r\n  let obj = ToObject(this);\r\n\r\n  // 2. Создаем и возвращаем новый объект итератора для массива O. \r\n  // Итератор будет возвращать пары ключ-значение для каждого \r\n  // элемента в массиве. Параметр key+value указывает, что итератор \r\n  // должен возвращать как ключ, так и значение для каждого элемента.\r\n  return CreateArrayIterator(obj, key+value);\r\n};\r\n```\r\n\r\n##### ECMAScript\r\n\r\n```js\r\n1. Let O be ? ToObject(this value).\r\n2. Return CreateArrayIterator(O, key+value).\r\n```",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n)",
            "color": "lightgreen"
          }
        },
        "sc": {
          "title": "O(1)",
          "color": "green"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.entries",
        "title": "entries()",
        "slug": "array/entries"
      },
      "array/every": {
        "content": "Метод `every()` проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции.\r\n\r\n##### Использование\r\n\r\n```js\r\nfunction isBigEnough(element, index, array) {\r\n  return element >= 10;\r\n}\r\n\r\n[12, 5, 8, 130, 44].every(isBigEnough); // false\r\n[12, 54, 18, 130, 44].every(isBigEnough); // true\r\n```\r\n\r\n##### Примерная внутренняя реализация\r\n\r\n```js\r\n// n = arr.length\r\n// k = callbackfn\r\n\r\n// this = arr\r\nArray.prototype.every = function(callbackfn, thisArg) {\r\n  // 1. Преобразуем this в объект, если это необходимо\r\n  let obj = ToObject(this);\r\n\r\n  // 2. Получаем длину массивоподобного объекта obj\r\n  let len = LengthOfArrayLike(obj);\r\n\r\n  // 3. Проверяем, является ли callbackfn вызываемой функцией\r\n  if (IsCallable(callbackfn) === false) {\r\n    throw new TypeError('callbackfn is not a function');\r\n  }\r\n\r\n  // 4. Инициализируем счетчик k значением 0\r\n  let k = 0;\r\n\r\n  // 5. Повторяем, пока k < len\r\n  while (k < len) {\r\n    // a. Получаем строковый индекс Pk для текущего значения k\r\n    let Pk = ToString(𝔽(k));\r\n\r\n    // b. Проверяем, существует ли свойство с индексом Pk в объекте obj\r\n    let kPresent = HasProperty(obj, Pk);\r\n\r\n    // c. Если свойство существует\r\n    if (kPresent === true) {\r\n      // i. Получаем значение элемента по индексу Pk\r\n      let kValue = Get(obj, Pk);\r\n\r\n      // ii. Вызываем callbackfn с аргументами kValue, 𝔽(k), obj\r\n      let testResult = ToBoolean(Call(callbackfn, thisArg, [kValue, 𝔽(k), obj]));\r\n\r\n      // iii. Если результат вызова callbackfn равен false, возвращаем false\r\n      if (testResult === false) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // d. Увеличиваем счетчик k на 1\r\n    k = k + 1;\r\n  }\r\n\r\n  // 6. Если цикл завершился без возвращения false, возвращаем true\r\n  return true;\r\n};\r\n```\r\n\r\n##### ECMAScript\r\n\r\n```js\r\n1. Let O be ? ToObject(this value).\r\n2. Let len be ? LengthOfArrayLike(O).\r\n3. If IsCallable(callbackfn) is false, throw a TypeError exception.\r\n4. Let k be 0.\r\n5. Repeat, while k < len,\r\n  a. Let Pk be ! ToString(𝔽(k)).\r\n  b. Let kPresent be ? HasProperty(O, Pk).\r\n  c. If kPresent is true, then\r\n    i. Let kValue be ? Get(O, Pk).\r\n    ii. Let testResult be ToBoolean(? Call(callbackfn, thisArg, « kValue, 𝔽(k), O »)).\r\n    iii. If testResult is false, return false.\r\n  d. Set k to k + 1.\r\n6. Return true.\r\n```",
        "tc": {
          "best": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n)",
            "color": "lightgreen"
          },
          "worst": {
            "title": "O(n * k)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(1)",
          "color": "green"
        },
        "esLink": "https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.every",
        "title": "every()",
        "slug": "array/every"
      },
      "array/fill": {
        "content": "`fill`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "fill()",
        "slug": "array/fill"
      },
      "array/filter": {
        "content": "`filter`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "filter()",
        "slug": "array/filter"
      },
      "array/find": {
        "content": "`find`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "find()",
        "slug": "array/find"
      },
      "array/findindex": {
        "content": "`findIndex`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "findIndex()",
        "slug": "array/findindex"
      },
      "array/findlast": {
        "content": "`findLast`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "findLast()",
        "slug": "array/findlast"
      },
      "array/findlastindex": {
        "content": "Привет :) Это метод `findLastIndex`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "findLastIndex()",
        "slug": "array/findlastindex"
      },
      "array/flat": {
        "content": "`flat`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "flat()",
        "slug": "array/flat"
      },
      "array/flatmap": {
        "content": "`flatMap`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "flatMap()",
        "slug": "array/flatmap"
      },
      "array/foreach": {
        "content": "`forEach`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "forEach()",
        "slug": "array/foreach"
      },
      "array/includes": {
        "content": "`includes`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "includes()",
        "slug": "array/includes"
      },
      "array/indexof": {
        "content": "`indexOf`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "indexOf()",
        "slug": "array/indexof"
      },
      "array/join": {
        "content": "Привет :) Это метод `join`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "join()",
        "slug": "array/join"
      },
      "array/keys": {
        "content": "`keys`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "keys()",
        "slug": "array/keys"
      },
      "array/lastindexof": {
        "content": "Привет :) Это метод `lastIndexOf`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "lastIndexOf()",
        "slug": "array/lastindexof"
      },
      "array/map": {
        "content": "`map`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "map()",
        "slug": "array/map"
      },
      "array/pop": {
        "content": "`pop`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "pop()",
        "slug": "array/pop"
      },
      "array/push": {
        "content": "`push`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "push()",
        "slug": "array/push"
      },
      "array/reduce": {
        "content": "`reduce`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "reduce()",
        "slug": "array/reduce"
      },
      "array/reduceright": {
        "content": "Привет :) Это метод `reduceRight`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "reduceRight()",
        "slug": "array/reduceright"
      },
      "array/reverse": {
        "content": "`reverse`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "reverse()",
        "slug": "array/reverse"
      },
      "array/shift": {
        "content": "`shift`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "shift()",
        "slug": "array/shift"
      },
      "array/slice": {
        "content": "`slice`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "slice()",
        "slug": "array/slice"
      },
      "array/some": {
        "content": "`some`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "some()",
        "slug": "array/some"
      },
      "array/sort": {
        "content": "Привет :) Это метод `sort`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "sort()",
        "slug": "array/sort"
      },
      "array/splice": {
        "content": "`splice`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "splice()",
        "slug": "array/splice"
      },
      "array/tolocalestring": {
        "content": "Привет :) Это метод `toLocaleString`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toLocaleString()",
        "slug": "array/tolocalestring"
      },
      "array/toreversed": {
        "content": "`toReversed`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toReversed()",
        "slug": "array/toreversed"
      },
      "array/tosorted": {
        "content": "`toSorted`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toSorted()",
        "slug": "array/tosorted"
      },
      "array/tospliced": {
        "content": "`toSpliced`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toSpliced()",
        "slug": "array/tospliced"
      },
      "array/tostring": {
        "content": "`toString`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toString()",
        "slug": "array/tostring"
      },
      "array/unshift": {
        "content": "`unshift`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "unshift()",
        "slug": "array/unshift"
      },
      "array/values": {
        "content": "`values`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "values()",
        "slug": "array/values"
      },
      "array/with": {
        "content": "`with`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "with()",
        "slug": "array/with"
      }
    },
    "string": {
      "string/anchor": {
        "content": "`anchor`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "anchor()",
        "slug": "string/anchor"
      },
      "string/at": {
        "content": "`at`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "at()",
        "slug": "string/at"
      },
      "string/big": {
        "content": "`big`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "big()",
        "slug": "string/big"
      },
      "string/blink": {
        "content": "`blink`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "blink()",
        "slug": "string/blink"
      },
      "string/bold": {
        "content": "`bold`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "bold()",
        "slug": "string/bold"
      },
      "string/charat": {
        "content": "`charAt`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "charAt()",
        "slug": "string/charat"
      },
      "string/charcodeat": {
        "content": "`charCodeAt`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "charCodeAt()",
        "slug": "string/charcodeat"
      },
      "string/codepointat": {
        "content": "`codePointAt`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "codePointAt()",
        "slug": "string/codepointat"
      },
      "string/concat": {
        "content": "`concat`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "concat()",
        "slug": "string/concat"
      },
      "string/endswith": {
        "content": "`endsWith`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "endsWith()",
        "slug": "string/endswith"
      },
      "string/fixed": {
        "content": "`fixed`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "fixed()",
        "slug": "string/fixed"
      },
      "string/fontcolor": {
        "content": "`fontcolor`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "fontcolor()",
        "slug": "string/fontcolor"
      },
      "string/fontsize": {
        "content": "`fontsize`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "fontsize()",
        "slug": "string/fontsize"
      },
      "string/includes": {
        "content": "`includes`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "includes()",
        "slug": "string/includes"
      },
      "string/indexof": {
        "content": "`indexOf`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "indexOf()",
        "slug": "string/indexof"
      },
      "string/iswellformed": {
        "content": "`isWellFormed`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "isWellFormed()",
        "slug": "string/iswellformed"
      },
      "string/italics": {
        "content": "`italics`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "italics()",
        "slug": "string/italics"
      },
      "string/lastindexof": {
        "content": "`lastIndexOf`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "lastIndexOf()",
        "slug": "string/lastindexof"
      },
      "string/link": {
        "content": "`link`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "link()",
        "slug": "string/link"
      },
      "string/localecompare": {
        "content": "`localeCompare`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "localeCompare()",
        "slug": "string/localecompare"
      },
      "string/match": {
        "content": "`match`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "match()",
        "slug": "string/match"
      },
      "string/matchall": {
        "content": "`matchAll`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "matchAll()",
        "slug": "string/matchall"
      },
      "string/normalize": {
        "content": "`normalize`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "normalize()",
        "slug": "string/normalize"
      },
      "string/padend": {
        "content": "`padEnd`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "padEnd()",
        "slug": "string/padend"
      },
      "string/padstart": {
        "content": "`padStart`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "padStart()",
        "slug": "string/padstart"
      },
      "string/repeat": {
        "content": "`repeat`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "repeat()",
        "slug": "string/repeat"
      },
      "string/replace": {
        "content": "`replace`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "replace()",
        "slug": "string/replace"
      },
      "string/replaceall": {
        "content": "`replaceAll`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "replaceAll()",
        "slug": "string/replaceall"
      },
      "string/search": {
        "content": "`search`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "search()",
        "slug": "string/search"
      },
      "string/slice": {
        "content": "Привет :) Это метод `slice`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "slice()",
        "slug": "string/slice"
      },
      "string/small": {
        "content": "`small`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "small()",
        "slug": "string/small"
      },
      "string/split": {
        "content": "Привет :) Это метод `split`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "split()",
        "slug": "string/split"
      },
      "string/startswith": {
        "content": "`startsWith`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "startsWith()",
        "slug": "string/startswith"
      },
      "string/strike": {
        "content": "`strike`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "strike()",
        "slug": "string/strike"
      },
      "string/stringfromcharcode": {
        "content": "`String.fromCharCode`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "String.fromCharCode()",
        "slug": "string/stringfromcharcode"
      },
      "string/stringfromcodepoint": {
        "content": "`String.fromCodePoint`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "String.fromCodePoint()",
        "slug": "string/stringfromcodepoint"
      },
      "string/stringraw": {
        "content": "`String.raw`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "String.raw()",
        "slug": "string/stringraw"
      },
      "string/sub": {
        "content": "`sub`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "sub()",
        "slug": "string/sub"
      },
      "string/substr": {
        "content": "`substr`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "substr()",
        "slug": "string/substr"
      },
      "string/substring": {
        "content": "`substring`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "substring()",
        "slug": "string/substring"
      },
      "string/sup": {
        "content": "`sup`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "sup()",
        "slug": "string/sup"
      },
      "string/tolocalelowercase": {
        "content": "`toLocaleLowerCase`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toLocaleLowerCase()",
        "slug": "string/tolocalelowercase"
      },
      "string/tolocaleuppercase": {
        "content": "`toLocaleUpperCase`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toLocaleUpperCase()",
        "slug": "string/tolocaleuppercase"
      },
      "string/tolowercase": {
        "content": "`toLowerCase`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toLowerCase()",
        "slug": "string/tolowercase"
      },
      "string/tostring": {
        "content": "`toString`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toString()",
        "slug": "string/tostring"
      },
      "string/touppercase": {
        "content": "`toUpperCase`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toUpperCase()",
        "slug": "string/touppercase"
      },
      "string/towellformed": {
        "content": "`toWellFormed`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "toWellFormed()",
        "slug": "string/towellformed"
      },
      "string/trim": {
        "content": "`trim`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "trim()",
        "slug": "string/trim"
      },
      "string/trimend": {
        "content": "`trimEnd`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "trimEnd()",
        "slug": "string/trimend"
      },
      "string/trimstart": {
        "content": "`trimStart`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "trimStart()",
        "slug": "string/trimstart"
      },
      "string/valueof": {
        "content": "`valueOf`.",
        "tc": {
          "best": {
            "title": "O(n + m)",
            "color": "lightgreen"
          },
          "average": {
            "title": "O(n + m)",
            "color": "limegreen"
          },
          "worst": {
            "title": "O(n * m)",
            "color": "limegreen"
          }
        },
        "sc": {
          "title": "O(n * m)",
          "color": "limegreen"
        },
        "esLink": "",
        "title": "valueOf",
        "slug": "string/valueof"
      }
    }
  }
}